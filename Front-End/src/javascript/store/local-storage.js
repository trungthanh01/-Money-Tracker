// File: Front-End/src/javascript/store/local-storage.js
// ƒê√¢y l√† module l√µi, ch·ªãu tr√°ch nhi·ªám qu·∫£n l√Ω t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa ·ª©ng d·ª•ng
// trong LocalStorage. N√≥ l√† "single source of truth".

// --- 1. C√ÅC H·∫∞NG S·ªê V√Ä D·ªÆ LI·ªÜU M·∫∂C ƒê·ªäNH ---

const DB_KEY = 'moneyTrackerData';

// C·∫•u tr√∫c d·ªØ li·ªáu m·∫∑c ƒë·ªãnh khi ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·∫ßn ƒë·∫ßu
export const DEFAULT_DATA = {
    salary: 0,
    currency: 'VND',
    jars: {
        debt:       { name: "Tr·∫£ N·ª£",       balance: 0, ratio: 20 },
        expenses:   { name: "Chi Ti√™u",     balance: 0, ratio: 40 },
        emergency:  { name: "Kh·∫©n C·∫•p",     balance: 0, ratio: 10 },
        savings:    { name: "Ti·∫øt Ki·ªám",    balance: 0, ratio: 10 },
        investment: { name: "ƒê·∫ßu T∆∞",      balance: 0, ratio: 10 },
        learning:   { name: "H·ªçc T·∫≠p",      balance: 0, ratio: 10 },
    },
    transactions: [] // { id, type, amount, description, jar, date }
};

// Th√¥ng tin v·ªÅ c√°c lo·∫°i h·ªß ƒë·ªÉ d·ªÖ d√†ng truy xu·∫•t
export const JAR_INFO = {
    debt:       { nameKey: "jars.debt.name",       color: "var(--color-jar-debt)",       icon: "üí≥" },
    expenses:   { nameKey: "jars.expenses.name",   color: "var(--color-jar-expenses)",   icon: "üõí" },
    emergency:  { nameKey: "jars.emergency.name",  color: "var(--color-jar-emergency)",  icon: "üöë" },
    savings:    { nameKey: "jars.savings.name",    color: "var(--color-jar-savings)",    icon: "üí∞" },
    investment: { nameKey: "jars.investment.name", color: "var(--color-jar-investment)", icon: "üìà" },
    learning:   { nameKey: "jars.learning.name",   color: "var(--color-jar-learning)",   icon: "üìö" }
};

// Th√¥ng tin v·ªÅ c√°c ƒë∆°n v·ªã ti·ªÅn t·ªá ƒë∆∞·ª£c h·ªó tr·ª£
export const CURRENCY_INFO = {
    VND: { symbol: '‚Ç´',  decimal: 0, position: 'after' },
    USD: { symbol: '$',  decimal: 2, position: 'before' },
    EUR: { symbol: '‚Ç¨',  decimal: 2, position: 'before' },
    GBP: { symbol: '¬£',  decimal: 2, position: 'before' },
    JPY: { symbol: '¬•',  decimal: 0, position: 'before' },
    CNY: { symbol: '¬•',  decimal: 2, position: 'before' },
    KRW: { symbol: '‚Ç©',  decimal: 0, position: 'before' },
    INR: { symbol: '‚Çπ',  decimal: 2, position: 'before' },
    AUD: { symbol: 'A$', decimal: 2, position: 'before' },
    CAD: { symbol: 'C$', decimal: 2, position: 'before' }
};


// --- 2. C√ÅC H√ÄM TRUY XU·∫§T V√Ä L∆ØU TR·ªÆ D·ªÆ LI·ªÜU ---

/**
 * L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ LocalStorage.
 * N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, kh·ªüi t·∫°o v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh.
 * @returns {object} To√†n b·ªô d·ªØ li·ªáu c·ªßa ·ª©ng d·ª•ng.
 */
export function getData() {
    const data = localStorage.getItem(DB_KEY);
    return data ? JSON.parse(data) : { ...DEFAULT_DATA };
}

/**
 * L∆∞u to√†n b·ªô d·ªØ li·ªáu v√†o LocalStorage.
 * @param {object} data - D·ªØ li·ªáu m·ªõi c·∫ßn l∆∞u.
 */
export function setData(data) {
    try {
        localStorage.setItem(DB_KEY, JSON.stringify(data));
    } catch (error) {
        console.error("Error saving to localStorage:", error);
        // Trong t∆∞∆°ng lai c√≥ th·ªÉ th√™m th√¥ng b√°o cho ng∆∞·ªùi d√πng
    }
}


// --- 3. C√ÅC H√ÄM TI·ªÜN √çCH (GETTERS) ---

export const getJars = () => getData().jars;
export const getSalary = () => getData().salary;
export const getTransactions = () => getData().transactions;
export const getCurrency = () => getData().currency;
export const getRatios = () => {
    const jars = getJars();
    return Object.keys(jars).reduce((acc, key) => {
        acc[key] = jars[key].ratio;
        return acc;
    }, {});
};


// --- 4. C√ÅC H√ÄM THAY ƒê·ªîI D·ªÆ LI·ªÜU (SETTERS/MODIFIERS) ---

/**
 * Th√™m m·ªôt giao d·ªãch m·ªõi v√† c·∫≠p nh·∫≠t s·ªë d∆∞ c√°c h·ªß.
 * @param {'income' | 'expense'} type - Lo·∫°i giao d·ªãch.
 * @param {number} amount - S·ªë ti·ªÅn.
 * @param {string} description - M√¥ t·∫£.
 * @param {string} jarKey - Key c·ªßa h·ªß (v√≠ d·ª•: 'expenses').
 */
export function addTransaction(type, amount, description, jarKey) {
    const data = getData();
    const newTransaction = {
        id: `txn_${new Date().getTime()}`,
        type,
        amount,
        description,
        jar: jarKey,
        date: new Date().toISOString()
    };
    
    // Th√™m giao d·ªãch v√†o ƒë·∫ßu danh s√°ch
    data.transactions.unshift(newTransaction);
    
    // C·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa h·ªß t∆∞∆°ng ·ª©ng
    if (type === 'income') {
        data.jars[jarKey].balance += amount;
    } else {
        data.jars[jarKey].balance -= amount;
    }
    
    setData(data);
}

/**
 * C·∫≠p nh·∫≠t l∆∞∆°ng v√† t·ªâ l·ªá, sau ƒë√≥ ph√¢n b·ªï l·∫°i ti·ªÅn v√†o c√°c h·ªß.
 * @param {number} newSalary - M·ª©c l∆∞∆°ng m·ªõi.
 * @param {object} newRatios - Object ch·ª©a c√°c t·ªâ l·ªá m·ªõi (vd: { debt: 20, ... }).
 */
export function editSalary(newSalary, newRatios) {
    const data = getData();
    data.salary = newSalary;
    
    let totalBalance = 0;
    Object.keys(data.jars).forEach(key => {
        const newRatio = newRatios[key] || 0;
        data.jars[key].ratio = newRatio;
        const newBalance = Math.round(newSalary * (newRatio / 100));
        data.jars[key].balance = newBalance;
        totalBalance += newBalance;
    });

    // X·ª≠ l√Ω l√†m tr√≤n: c·ªông ph·∫ßn ch√™nh l·ªách v√†o h·ªß c√≥ t·ªâ l·ªá l·ªõn nh·∫•t
    const roundingDifference = newSalary - totalBalance;
    if (roundingDifference !== 0) {
        const largestJar = Object.keys(data.jars).reduce((a, b) => data.jars[a].ratio > data.jars[b].ratio ? a : b);
        data.jars[largestJar].balance += roundingDifference;
    }
    
    setData(data);
}

/**
 * C·∫≠p nh·∫≠t ƒë∆°n v·ªã ti·ªÅn t·ªá.
 * @param {string} currencyCode - M√£ ti·ªÅn t·ªá (VND, USD,...).
 */
export function setCurrency(currencyCode) {
    const data = getData();
    if (CURRENCY_INFO[currencyCode]) {
        data.currency = currencyCode;
        setData(data);
    }
}

/**
 * X√≥a to√†n b·ªô d·ªØ li·ªáu v√† quay v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh.
 */
export function clearAllData() {
    setData({ ...DEFAULT_DATA });
}

/**
 * Xu·∫•t d·ªØ li·ªáu hi·ªán t·∫°i ra m·ªôt object.
 * @returns {object} D·ªØ li·ªáu ·ª©ng d·ª•ng.
 */
export function exportData() {
    return getData();
}

/**
 * Nh·∫≠p d·ªØ li·ªáu t·ª´ m·ªôt object v√† ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán t·∫°i.
 * @param {object} importedData - D·ªØ li·ªáu c·∫ßn nh·∫≠p.
 * @returns {boolean} - Tr·∫£ v·ªÅ true n·∫øu import th√†nh c√¥ng, ng∆∞·ª£c l·∫°i l√† false.
 */
export function importData(importedData) {
    // Th√™m m·ªôt b∆∞·ªõc ki·ªÉm tra c·∫•u tr√∫c ƒë∆°n gi·∫£n
    if (importedData && importedData.salary !== undefined && importedData.jars) {
        setData(importedData);
        return true;
    }
    return false;
}


// --- 5. H√ÄM ƒê·ªäNH D·∫†NG ---

/**
 * ƒê·ªãnh d·∫°ng m·ªôt s·ªë th√†nh chu·ªói ti·ªÅn t·ªá theo ƒë∆°n v·ªã hi·ªán t·∫°i.
 * @param {number} amount - S·ªë ti·ªÅn c·∫ßn ƒë·ªãnh d·∫°ng.
 * @returns {string} Chu·ªói ti·ªÅn t·ªá ƒë√£ ƒë·ªãnh d·∫°ng (v√≠ d·ª•: "1.500.000 ‚Ç´" ho·∫∑c "$1,500.00").
 */
export function formatCurrencyWithSymbol(amount) {
    const currencyCode = getCurrency();
    const { symbol, decimal, position } = CURRENCY_INFO[currencyCode] || CURRENCY_INFO.VND;

    // S·ª≠ d·ª•ng Intl.NumberFormat ƒë·ªÉ ƒë·ªãnh d·∫°ng s·ªë cho ƒë√∫ng chu·∫©n
    const formattedAmount = new Intl.NumberFormat('vi-VN', {
        minimumFractionDigits: decimal,
        maximumFractionDigits: decimal,
    }).format(amount);
    
    return position === 'before'
        ? `${symbol}${formattedAmount}`
        : `${formattedAmount} ${symbol}`;
}
    